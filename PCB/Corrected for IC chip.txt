#include <msp430g2553.h>
#include <stdio.h>

#define STEP_PIN BIT4    // P1.4
#define DIR_PIN  BIT5    // P1.5
#define EN_PIN   BIT0    // P1.0
#define BUT1 BIT3
#define BUT2 BIT5

int currentdirection = 1;
char run='0';
int steps = 1;
int pulse = 1;
int maxsteps = 0;


void uart_write_char(unsigned char ch){
    while (!(IFG2&UCA0TXIFG));                // USCI_A0 TX buffer ready?
    UCA0TXBUF = ch;
    return;
}


void uart_write_uint16 (unsigned int n){
unsigned int array[5] = {0};
int digit, i = 0;
do {
digit = n%10;
array[i] = digit;
i++;
n = n/10; } while(n>0);
i=4;
int k,c=0;
while(c==0){
if(array[i]!=0){
c=1;
}
else
i--;
}
do {
k=array[i]+48;
uart_write_char(k);
i--;
} while(i>=0);
uart_write_char('\n');
uart_write_char('\r');
return;
}

void Initialize_UART(void){
    UCA0CTL1  = UCSWRST;
// Configure pins to UART functionality
    DCOCTL = 0;                               // Select lowest DCOx and MODx settings
      BCSCTL1 = CALBC1_1MHZ;                    // Set DCO
      DCOCTL = CALDCO_1MHZ;
      P1SEL = BIT1 + BIT2 ;                     // P1.1 = RXD, P1.2=TXD
      P1SEL2 = BIT1 + BIT2 ;                    // P1.1 = RXD, P1.2=TXD
      UCA0CTL1 |= UCSSEL_2;                     // SMCLK
      UCA0BR0 = 208;                            // 1MHz 4800
      UCA0BR1 = 0;                              // 1MHz 4800
      UCA0MCTL = 0;                        // Modulation UCBRSx = 1
      UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
      IE2 |= UCA0RXIE;                          // Enable USCI_A0 RX interrupt
}



void enableDriver() {
    P1OUT |= EN_PIN;
}

void disableDriver() {
    P1OUT &= ~EN_PIN;
}

void main(void) {
    WDTCTL = WDTPW | WDTHOLD;       // Stop watchdog

    BCSCTL1 = CALBC1_1MHZ;          // Set clock to 1MHz
    DCOCTL = CALDCO_1MHZ;


    // Configure pins as output
    P1DIR |= STEP_PIN + DIR_PIN + EN_PIN;
    Initialize_UART();

    // Initialize pin states
    P1OUT &= ~(STEP_PIN + DIR_PIN);  // STEP and DIR LOW
    P1OUT |= EN_PIN;                 // EN HIGH = disabled initially
    config_ACLK_to_32KHz_crystal();
    P2DIR &= ~(BUT1 | BUT2);
    P2REN |= BUT1 | BUT2;
    P2OUT |= BUT1 | BUT2;
    P2IES |= (BUT1|BUT2);
    P2IFG &= ~(BUT1|BUT2); // 0: clear the interrupt flags
    P2IE |= (BUT1|BUT2); // 1: enable the interrupts
    _enable_interrupts();
    while(1){
        while (run!='1'){};
        TA0CCR0 = 250; 
        TA0CCTL0 |= CCIE; // Enable Channel 0 CCIE bit
        TA0CCTL0 &= ~CCIFG; // Clear Channel 0 CCIFG bit
        TA0CTL = TASSEL_1 | ID_0 | MC_1 | TACLR;
        enableDriver();
        while(run=='1'){
            uart_write_uint16(steps);
            __delay_cycles(10000);
        }
        TA0CTL &= ~(MC_3);
        TA0CCTL0 &= ~CCIE;
    }
}



#pragma vector = PORT2_VECTOR;
__interrupt void BUTTON_ISR(){
        if (P2IFG==BUT1){
                P1OUT |= DIR_PIN;
                steps = 1;
                currentdirection = 1;
            }

        if (P2IFG==BUT2){
                P1OUT &= ~DIR_PIN;
                maxsteps=steps;
                currentdirection=-1;
            }
        P2IFG &= ~(BUT1|BUT2);
        return;
    }

#pragma vector = TIMER0_A0_VECTOR
__interrupt void T0A0_ISR() {
    if (pulse == 1){
        P1OUT |= STEP_PIN;
        pulse = 0;
    }
    else if (pulse == 0){
        P1OUT &= ~STEP_PIN;
        pulse = 1;
        steps = steps+currentdirection;
    }

    TA0CCTL0 &= ~CCIFG;
}

#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void) {
    char temp = UCA0RXBUF;
    if ((temp=='0') || (temp=='1')){
    run = temp;}
    }
